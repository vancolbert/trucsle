#align_assign_span = 1
#align_enum_equ_span = 4 # ' =' in enum definition
#align_func_params_span = 0
align_keep_tabs = false
align_nl_cont = 0
align_nl_cont_spaces = 1
align_on_tabstop = false # align on tabstops
#align_pp_define_gap = 4;
#align_pp_define_span = 8;
#align_right_cmt_span = 3
#align_struct_init_span = 3 # align stuff in a structure init ' = { }'
#align_var_def_colon = true
#align_var_def_inline = true
#align_var_def_span = 2
#align_var_def_star = false
align_with_tabs = false # use tabs to align
#cmt_star_cont = false
code_width = 1000
#disable_processing_nl_cont = true
#indent_brace = 0
indent_case_brace = 0
indent_columns = output_tab_size
indent_ignore_case_brace = false
indent_label = 1 # pos: absolute col, neg: relative column
indent_switch_break_with_case = false
indent_switch_case = 0
indent_with_tabs = 2 # 1=indent to level only, 2=indent with tabs
input_tab_size = 8 # original tab size
ls_code_width = false
ls_func_split_full = false
mod_case_brace = remove
mod_enum_last_comma = force
mod_full_brace_do = force # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_for = force # "for () a--;" vs "for () { a--; }"
mod_full_brace_if = force # "if (a) a--;" vs "if (a) { a--; }"
#mod_full_brace_nl = 3 # don't remove if more than 3 newlines
mod_full_brace_while = force # "while (a) a--;" vs "while (a) { a--; }"
mod_move_case_break = true
mod_move_case_return = true
mod_paren_on_return = remove # "return 1;" vs "return (1);"
mod_remove_duplicate_include = true
mod_remove_extra_semicolon = true
newlines = lf # lf/crlf/cr/auto
nl_after_brace_open = true
nl_after_case = true
#nl_after_return = true;
nl_after_semicolon = true
nl_assign_brace = remove
nl_assign_leave_one_liners = true
nl_before_brace_open = false
#nl_before_case = 1
nl_before_if_closing_paren = remove
nl_brace_else = remove
nl_brace_else = remove # "} else" vs "} \n else" - cuddle else
nl_brace_while = remove # "} while" vs "} \n while" - cuddle while
nl_case_colon_brace = remove
nl_class_brace = remove
nl_class_brace = remove
nl_class_leave_one_liners = true
nl_collapse_empty_body_functions = true
nl_collapse_empty_body = true
nl_create_list_one_liner = false
#nl_define_macro = false
nl_do_brace = remove # "do {" vs "do \n {"
nl_else_brace = remove # "else {" vs "else \n {"
nl_elseif_brace = remove
nl_else_if = remove
nl_enum_brace = remove # "enum {" vs "enum \n {"
nl_enum_leave_one_liners = true
nl_fcall_brace = remove # "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace = remove # "int foo() {" vs "int foo()\n{"
nl_for_brace = remove # "for () {" vs "for () \n {"
nl_func_call_args_multi_line = false
nl_func_call_args = remove
nl_func_call_end_multi_line = false
nl_func_call_end = remove
nl_func_call_paren = remove
nl_func_call_start_multi_line = false
nl_func_call_start = remove
nl_func_decl_args = remove
nl_func_decl_end = remove
nl_func_decl_start = remove
nl_func_def_args = remove
nl_func_def_end = remove
nl_func_def_paren = remove
nl_func_def_start = remove
nl_func_paren = remove
nl_if_brace = remove # "if () {" vs "if () \n {"
nl_max = 1
nl_multi_line_sparen_close = remove
nl_multi_line_sparen_open = remove
nl_namespace_brace = remove
nl_return_expr = remove
nl_squeeze_paren_close = true
nl_struct_brace = remove # "struct {" vs "struct \n {"
nl_switch_brace = remove # "switch () {" vs "switch () \n {"
#nl_type_brace_init_lst_close = remove
#nl_type_brace_init_lst_open = remove
#nl_type_brace_init_lst = remove
nl_union_brace = remove # "union {" vs "union \n {"
nl_var_def_blk_end_func_top = 1
nl_while_brace = remove # "while () {" vs "while () \n {"
output_tab_size = 8 # new tab size
pos_arith = join
pos_assign = join
pos_bool = join
pos_class_comma = join
#pos_comma = join
pos_compare = join
pos_conditional = join
pos_enum_comma = join
pos_shift = join
sp_after_cast = remove # "(int) a" vs "(int)a"
sp_after_comma = force
sp_after_emb_cmt = force
sp_after_ptr_star_func = remove
sp_after_ptr_star_qualifier = remove
sp_after_ptr_star = remove
sp_after_sparen = force # "if () {" vs "if (){"
sp_after_throw = force
sp_arith = force
sp_assign = force
sp_attribute_paren = remove
sp_before_case_colon = remove
sp_before_comma = remove
sp_before_emb_cmt = force
sp_before_global_scope_ptr_star = force
sp_before_nl_cont = force
sp_before_ptr_star = force
sp_before_ptr_star_func = force
sp_before_qualifier_ptr_star = force
sp_before_scope_ptr_star = force
sp_before_sparen = force # "if (" vs "if("
sp_before_unnamed_ptr_star = force
sp_between_ptr_star = remove
sp_bool = force
sp_brace_brace = remove
sp_brace_close_while = force
sp_brace_else = force
sp_brace_typedef = force
sp_catch_paren = force
sp_compare = force
sp_cparen_oparen = remove
sp_cpp_cast_paren = remove
sp_defined_paren = remove
sp_do_brace_open = force
sp_else_brace = force
sp_enum_brace = force
sp_extern_paren = remove
sp_fparen_brace = force
sp_func_call_paren = remove # "foo (" vs "foo("
sp_func_call_user_inside_fparen = remove
sp_func_call_user_paren_paren = remove
sp_func_def_paren = remove # "int foo (){" vs "int foo(){"
sp_func_proto_paren = remove # "int foo ();" vs "int foo();"
sp_inside_braces_enum = remove # "{ 1 }" vs "{1}"
sp_inside_braces = remove # "{ 1 }" vs "{1}"
sp_inside_braces_struct = remove # "{ 1 }" vs "{1}"
sp_inside_fparen = remove
sp_inside_fparens = remove
sp_inside_paren_cast = remove
sp_inside_paren = remove
sp_inside_tparen = remove
sp_num_after_emb_cmt = 1
sp_num_before_emb_cmt = 1
sp_paren_brace = force
sp_paren_paren = remove
sp_paren_qualifier = force
sp_qualifier_unnamed_ptr_star = force
sp_return_paren = force # "return (1);" vs "return(1);"
sp_sizeof_paren = remove # "sizeof (int)" vs "sizeof(int)"
sp_sparen_brace = force
sp_throw_paren = remove
sp_while_paren_open = force
sp_sparen_paren = remove
sp_after_sparen = remove
sp_inside_for = remove
sp_inside_sparen_open = remove
sp_inside_sparen = remove
sp_inside_sparen_close = remove
sp_before_square = remove
sp_before_squares = remove
sp_before_semi = remove
sp_inside_square = remove
